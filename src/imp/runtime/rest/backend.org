#+TITLE: Backend for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates the backend of users and roles for the LDS Dashboard.
* Models
** Roles
   This is the model of =Roles=.
   The Roles table stores the list of all roles. It has only 1 column to store  =role_name= of type string.
#+NAME: role-model
#+BEGIN_SRC python 


class Roles(db.Model, UserMixin):
    __tablename__ = "roles"
    role_name = db.Column(db.String(10),primary_key=True)

    def __repr__(self):
        return '<Role\'s Name is: %r>' %(self.role_name)
        
    def to_dict(self):
        return {
            'role': self.role_name
        }

    def save(self):
        db.session.add(self)
        db.session.commit()
#+END_SRC
** User
   This is the model of =User=.
   The User table stores the list of all users. It has 4 Columns, 
=id= of type Integer, =email= of type string, =name= of type string and 
=role= of type Entity respectively.
#+NAME: user-model
#+BEGIN_SRC python
class User(db.Model, UserMixin):
    __tablename__ = "users"
    id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    email = db.Column(db.String(255), unique=True, nullable=False)
    name = db.Column(db.String(255))
    role = db.Column(db.String(10),db.ForeignKey(Roles.role_name))

    def __repr__(self):
        return 'User\'s Id is: %d, User\'s Name is: %r & User\'s Email is: %r>' %(self.id, self.name, self.email)

    def to_dict(self):
        return {
            'id' : self.id,
            'name': self.name,
            'email': self.email,
            'role': self.role
        }

    def save(self):
        db.session.add(self)
        db.session.commit()
#+END_SRC

* Infra
** sources
*** Imports
#+NAME: imports_for_sources
#+BEGIN_SRC python
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from runtime.rest.app import db
import os
import datetime
#+END_SRC 

* Tangle
** sources
#+BEGIN_SRC python :tangle app/users/db.py :eval no :noweb yes
<<imports_for_sources>>
<<role-model>>
<<user-model>>
#+END_SRC
