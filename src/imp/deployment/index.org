#+TITLE: Deploying the application on a server
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document will illustrate installation of all the dependencies required
  for setting up the application.

* Install dependendent python packages
  Here we use the =setuptools= module from the standard lib, to make a
  =setup.py= file, which will install all the python library dependencies.

#+BEGIN_SRC python :tangle setup.py :eval no
from setuptools import setup

requires = [
    'flask==0.12.2',
    'oauthlib==2.0.6',
    'flask-oauthlib==0.9.4',
    'requests==2.18.4',
    'markupsafe==1.0',
    'flask-cors==3.0.3'
 
]

setup(
    name='lds',
    version='2.0',
    install_requires=requires
)

#+END_SRC

* Install all dependencies and setup the software
  Install all dependencies, including the OS related packages, Python packages,
  setup the database, configure the webserver, and finally deploy the
  application.

#+BEGIN_SRC sh :tangle setup.sh :eval no
#!/bin/bash

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

# Update the packages
echo "Updating package cache.."
apt-get -y update
if [[ $? -ne 0 ]]; then
  echo "Updating package cache failed!"
  exit 1;
fi

# Install pre-requsite dependencies: python-dev, mysqld-dev, setuptools,
# apache, mod_wsgi etc.
echo "Installing pre-requisite dependencies.."
apt-get install -y python-dev libmysqlclient-dev python-setuptools apache2 libapache2-mod-wsgi libffi-dev build-essential libssl-dev libxml2-dev libxslt1-dev build-essential 
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installing pre-requisite dependencies failed!"
  exit 1;
fi

echo "Enabling the mod WSGI on apache"
a2enmod wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to enable mod wsgi!"
  exit 1;
fi

#pip install Flask requests flask-cors 
exit 0

#+END_SRC

* Configuring the application and its deployment
  The following program configures the application, configures the web server
  to use WSGI and use the application scripts, and finally calls the database
  setup scripts to actually setup the database with tables.

#+BEGIN_SRC sh :tangle configure.sh :eval no
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the config.py file with appropriate values
# 2. Update the apache config to server via WSGI
# 3. Run the database setup scripts to setup the database

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )


update_apache_config() {
  PROC_NAME="ldsdashboard"
  WSGI_SCRIPT="ldsdashboard.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/000-default.conf"

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT
  " $APACHE_VHOST_FILE

  #sed -i '/<\/VirtualHost>/i \
  #  WSGIDaemonProcess $PROC_NAME user=www-data group=www-data threads=5
  #  WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT

  #  <Directory $ABS_PATH_DS>
  #    WSGIProcessGroup $PROC_NAME
  #    WSGIApplicationGroup %{GLOBAL}
  #    Order deny,allow
  #    Allow from all
  #  </Directory>
  #' $APACHE_VHOST_FILE

}

update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart
export PYTHONPATH="/var/www"
exit 0;
#+END_SRC

* Deploying the application

#+BEGIN_SRC python :tangle ldsdashboard.wsgi :eval no
import sys, os

BASE_DIR = BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))

#sys.path.insert(0, BASE_DIR)
sys.path.insert(0, "/var/www")

from runtime.rest.app import application

#+END_SRC

* Tangle                                       :boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "deployment package"
#+END_SRC
